// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id               Int      @id @default(autoincrement())
  fullName         String
  email            String   @unique
  password         String
  phoneNumber      String
  role             Role
  profilePicture   String   @default("https://res.cloudinary.com/dwptrdpk0/image/upload/v1733977839/anonymous_ksneos.jpg")
  referralCode     String   @unique
  pointsBalance    Int
  pointsExpiryDate DateTime
  address          String
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  events           Event[]

  @@map("users")
}

enum Role {
  ORGANIZER
  CUSTOMER
}

model Event {
  id               Int             @id @default(autoincrement())
  name             String
  image            String
  description      String          @db.Text
  organizer        User            @relation(fields: [userId], references: [id])
  address          String
  specificLocation String
  locationId       Int
  location         Location        @relation(fields: [locationId], references: [id])
  startDate        DateTime
  endDate          DateTime
  isDeleted        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  eventCategories  EventCategory[]
  userId           Int
  ticketTypes      TicketType[]
  vouchers         Voucher[]

  @@map("events")
}

model Location {
  id        Int      @id @default(autoincrement())
  country   String
  city      String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("locations")
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  eventCategories EventCategory[]

  @@map("categories")
}

model EventCategory {
  id         Int      @id @default(autoincrement())
  eventId    Int
  categoryId Int
  event      Event    @relation(fields: [eventId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("event_categories")
}

model TicketType {
  id             Int      @id @default(autoincrement())
  ticketType     String
  price          Int
  availableSeats Int
  eventId        Int
  event          Event    @relation(fields: [eventId], references: [id])
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("ticket_types")
}

model Voucher {
  id          Int      @id @default(autoincrement())
  code        String
  description String
  nominal     Int
  quantity    Int
  eventId     Int
  event       Event    @relation(fields: [eventId], references: [id])
  startAt     DateTime
  expiresAt   DateTime
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vouchers")
}
