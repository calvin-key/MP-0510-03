// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id                Int               @id @default(autoincrement())
  fullName          String
  email             String            @unique
  password          String
  phoneNumber       Int
  role              Role
  profilePicture    String?           @default("https://res.cloudinary.com/dwptrdpk0/image/upload/v1733977839/anonymous_ksneos.jpg")
  referralCode      String            @unique
  pointsBalance     Int
  pointsExpiryDate  DateTime
  address           String?
  isDeleted         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  events            Event[]
  referralHistories RefferalHistory[] @relation("Referrer")
  referredBy        RefferalHistory[] @relation("Referred")
  userCoupons       UserCoupon[]
  points            Point[]           @relation("UserPoints")

  @@map("users")
}

enum Role {
  ORGANIZER
  CUSTOMER
}

model Point {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  expiredAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserPoints", fields: [userId], references: [id])

  @@map("points")
}

model RefferalHistory {
  id            Int      @id @default(autoincrement())
  referrerId    Int
  referredId    Int
  pointsAwarded Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredId], references: [id])

  @@map("referral_histories")
}

model UserCoupon {
  id        Int      @id @default(autoincrement())
  userId    Int
  couponId  Int
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@map("user_coupons")
}

model Coupon {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  nominal     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userCoupons UserCoupon[]

  @@map("coupons")
}

model Event {
  id              Int             @id @default(autoincrement())
  name            String
  description     String          @db.Text
  organizerId     Int
  organizer       User            @relation(fields: [userId], references: [id])
  addressId       Int
  address         Address         @relation(fields: [addressId], references: [id])
  startDate       DateTime
  endDate         DateTime
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          Int
  eventCategories EventCategory[]

  @@map("events")
}

model Address {
  id            Int      @id @default(autoincrement())
  country       String
  city          String
  streetAddress String
  description   String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  events        Event[]

  @@map("addresses")
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  eventCategories EventCategory[]

  @@map("categories")
}

model EventCategory {
  id         Int      @id @default(autoincrement())
  eventId    Int
  categoryId Int
  event      Event    @relation(fields: [eventId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("event_categories")
}
