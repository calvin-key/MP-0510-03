// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id                Int               @id @default(autoincrement())
  fullName          String
  email             String            @unique
  password          String
  phoneNumber       String
  role              Role
  profilePicture    String            @default("https://res.cloudinary.com/dwptrdpk0/image/upload/v1733977839/anonymous_ksneos.jpg")
  referralCode      String            @unique
  pointsBalance     Int
  pointsExpiryDate  DateTime
  address           String?
  bankAccount       String?
  isDeleted         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  events            Event[]
  points            Point[]           @relation("UserPoints")
  referralHistories ReferralHistory[] @relation("Referrer")
  referredBy        ReferralHistory[] @relation("Referred")
  referralHistories ReferralHistory[] @relation("Referrer")
  referredBy        ReferralHistory[] @relation("Referred")
  userCoupons       UserCoupon[]
  voucherUsage      VoucherUsage[]
  transactions      Transaction[]

  @@map("users")
}

enum Role {
  ORGANIZER
  CUSTOMER
}

model Point {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  expiredAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserPoints", fields: [userId], references: [id])

  @@map("points")
}

model ReferralHistory {
model ReferralHistory {
  id            Int      @id @default(autoincrement())
  referrerId    Int
  referredId    Int
  pointsAwarded Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredId], references: [id])

  @@map("referral_histories")
}

model UserCoupon {
  id        Int      @id @default(autoincrement())
  userId    Int
  couponId  Int
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId])
  @@map("user_coupons")
}

model Coupon {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  nominal    Int
  expiredAt    DateTime      @default(now())
  expiredAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userCoupons  UserCoupon[]
  transactions Transaction[]

  @@map("coupons")
}

model Event {
  id               Int             @id @default(autoincrement())
  name             String
  image            String
  description      String          @db.Text
  organizer        User            @relation(fields: [userId], references: [id])
  address          String
  bankAccount      String?
  specificLocation String
  locationId       Int
  location         Location        @relation(fields: [locationId], references: [id])
  startDate        DateTime
  endDate          DateTime
  isDeleted        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  eventCategories  EventCategory[]
  userId           Int
  ticketTypes      TicketType[]
  vouchers         Voucher[]

  @@map("events")
}

model Location {
  id        Int      @id @default(autoincrement())
  country   String
  city      String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("locations")
}

model Category {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  eventCategories EventCategory[]

  @@map("categories")
}

model EventCategory {
  id         Int      @id @default(autoincrement())
  eventId    Int
  categoryId Int
  event      Event    @relation(fields: [eventId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("event_categories")
}

model TicketType {
  id               Int               @id @default(autoincrement())
  ticketType       String
  price            Int
  availableSeats   Int
  eventId          Int
  event            Event             @relation(fields: [eventId], references: [id])
  isDeleted        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  transactions     Transaction[]
  transactionItems TransactionItem[]

  @@map("ticket_types")
}

model Voucher {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  description  String
  nominal      Int
  quantity     Int
  usageCount   Int            @default(0)
  eventId      Int
  event        Event          @relation(fields: [eventId], references: [id])
  startAt      DateTime
  expiresAt    DateTime
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  usedBy       VoucherUsage[]
  transactions Transaction[]

  @@map("vouchers")
}

model VoucherUsage {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@unique([userId, voucherId])
  @@map("voucher_usages")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  userId       Int
  pointsUsed   Int               @default(0)
  voucherId    Int?
  couponId     Int?
  totalPrice   Int
  status       TransactionStatus @default(waiting_for_payment)
  paymentProof String?
  expiresAt    DateTime
  confirmedAt  DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  user         User              @relation(fields: [userId], references: [id])
  voucher      Voucher?          @relation(fields: [voucherId], references: [id])
  coupon       Coupon?           @relation(fields: [couponId], references: [id]) // Add this
  items        TransactionItem[]
  TicketType   TicketType?       @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int?

  @@map("transactions")
}

model TransactionItem {
  id            Int      @id @default(autoincrement())
  transactionId Int
  ticketTypeId  Int
  quantity      Int
  pricePerUnit  Int
  subtotal      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
  ticketType  TicketType  @relation(fields: [ticketTypeId], references: [id])

  @@map("transaction_items")
}

enum TransactionStatus {
  waiting_for_payment
  waiting_for_admin_confirmation
  done
  rejected
  expired
  canceled
}
